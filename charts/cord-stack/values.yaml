# Default values for cord-stack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

defaultPrometheusRules:
  create: true

# The user to use for internal calls to cord-api
internalAPIUser: &internalAPIUser "internaluser"
# The password to use for internal calls to cord-api
internalAPIPass: &internalAPIPass "changeme"

cord-api:
  enabled: true
  imagePullSecrets: []
  serviceMonitor:
    enabled: true
  internalAPIUser: *internalAPIUser
  internalAPIPass: *internalAPIPass
  # When to trigger backups of AEM in cron syntax
  backupSchedule: "0 7 * * *"
  # Cron job to delete all backups that are older than the configured number of days
  backupCleaner:
    enabled: false
    schedule: "0 7 * * *"
    days: 30
  # Cron job to build packages on a schedule
  # There are currently two available frequencies: daily and weekly
  #  packageScheduleRunner:
  #    enabled: true
  #    # number of packages to build concurrently
  #    workers: 5
  #    frequencies:
  #      - frequency: daily
  #        schedule: "0 4 * * *"
  #      - frequency: weekly
  #        schedule: "0 5 * * 0"
  # Cron job to find and save new archives from the AEM Archive repository
  #  newArchiveRetriever:
  #    # -- Enable the cron job to find and save new archives from the AEM Archive repository
  #    enabled: true
  #    # -- Schedule to run the cron job on
  #    schedule: "0 7 * * *"
  #    # -- Address of the AEM Archive repository
  #    archivesAddress: https://downloads.stage.cord.tools/
  #    # -- Only find archives that were created after this date. This should be a recent date so that every archive in the AEM archive repository isn't downloaded
  #    afterDate: "2022-02-04"
  #    # -- Download new on prem AEM versions, e.g. 6.5.11
  #    downloadOnPrem: true
  #    # -- Download new cloud SDK versions, e.g. 2022.2.6276.20220205T222203Z-220100
  #    downloadCloudSDK: false
  localFileStore:
    enabled: true
    # Volume will hold packages and backups
    volumeSize: 100Gi
    path: /cord-files
    # HMAC secret to use for signed URLs
    signingKey: changeme
  config:
    # the package tool client id generated in cord-api-v2
    OAUTH_CLIENT_ID: ""
    OAUTH_ACCESS_TOKEN_URI: "https://cordtools.local/oauth/token"
    OAUTH_AUTHORIZATION_URI: "https://cordtools.local/oauth/authorize"
    OAUTH_REDIRECT_URI: "https://cordtools.local/oauth/authorize/package-tool"

    # AWS region that Cord Tools runs in. Is used for creating cloud data stores for environments.
    # AWS_REGION: us-west-2

    # URL to the bucket to use as a file store
    # e.g. for S3: 's3://hoodoo-stage-bucket?region=us-west-2'
    # e.g. for local: 'file:///local-bucket'
    BUCKET_URL: file:///cordtools-files

    # Max number of environments allowed.
    MAX_ENVIRONMENTS: "10"

    # Default size of the volume that will be created for each AEM instances
    AEM_DEFAULT_VOLUME_SIZE: "40Gi"

    # Max disk space that can be created for an environment
    AEM_MAX_VOLUME_SIZE: "1000Gi"

    # Amount of memory that AEM will request
    AEM_MEMORY_REQUEST: "2G"

    # Name of storage class for AEM volumes to use
    ENVIRONMENT_STORAGE_CLASS: ""

    # Comma separated list of image pull secrets to add to environment pods. e.g. "docker-hub, private-creds-1"
    # This should include the secret needed to pull the cordtools docker images
    ENVIRONMENT_IMAGE_PULL_SECRETS: ""

    # Comma separated list of image pull secrets to add to build runner pods. e.g. "docker-hub, private-creds-1"
    BUILD_IMAGE_PULL_SECRETS: ""

    # Public URL to Cord Tools
    WEB_APP_URL: "https://cordtools.local/"

    # Values for Github integration
    GITHUB_CLIENT_ID: ""
    GITHUB_AUTH_URL: "https://github.com/login/oauth"

    # Docker image to use as the base for AEM instances
    BASE_IMAGE_REPOSITORY: "public.ecr.aws/cord-tools/base"

    # Docker image to use for dispatcher pods
    DISPATCHER_IMAGE: "public.ecr.aws/cord-tools/dispatcher:4.3.3"

    # Port to use for dispatcher
    # DISPATCHER_PORT: "80"

    # Size of volume to create for dispatcher pods
    # DISPATCHER_VOLUME_SIZE: 20Gi

    # Amount of memory to request for dispatcher pods
    # DISPATCHER_MEMORY_REQUEST: 500M

    # Storage class to use for dispatcher pods
    # DISPATCHER_STORAGE_CLASS: ""

  secrets:
    GITHUB_CLIENT_SECRET: ""
  ingress:
    hosts:
      - host: cordtools.local
        paths:
          - path: /api/v1
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

  # Database
  mongodb:
    auth:
      password: "changeme"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  # Log storage
  loki:
    server:
      http_listen_port: 3100
    persistence:
      enabled: true
    serviceMonitor:
      enabled: true
  # Log collector
  promtail:
    serviceMonitor:
      enabled: true
    config:
      snippets:
        common:
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_node_name
            target_label: node_name
          - action: replace
            source_labels:
              - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            replacement: $1
            separator: /
            source_labels:
              - namespace
              - app
            target_label: job
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_name
            target_label: pod
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_container_name
            target_label: container
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_label_name
            target_label: name
          - action: labelmap
            regex: __meta_kubernetes_pod_label_cordTools(.+)
            replacement: cordTools${1}
          - action: replace
            replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
              - __meta_kubernetes_pod_uid
              - __meta_kubernetes_pod_container_name
            target_label: __path__

cord-api-v2:
  enabled: true
  imagePullSecrets: []
  metrics:
    enabled: true
  serviceMonitor:
    enabled: true
  internalAPIUser: *internalAPIUser
  internalAPIPass: *internalAPIPass
  config:
    RAILS_ENV: "production"

    # Host where the app is accessible from
    APP_HOST: "cordtools.local"

    # From setting for all emails sent
    APP_FROM_EMAIL: "Cord Tools <support@cord.tools>"

    # AWS Region if using SES to send emails (the default)
    AWS_REGION: ""

    # SMTP settings
    # SMTP_HOST: ""
    # SMTP_PORT: ""
    # SMTP_OPENSSL_VERIFY: ""

    # Host where assets are hosted
    APP_ASSET_HOST: "https://cordtools.local"

    # Public URL for docker registry for AEM images
    DOCKER_REGISTRY_ENDPOINT: "https://registry.cordtools.local"

    # Google OAuth client id for sign in via Google
    # GOOGLE_OAUTH_CLIENT_ID: ""

    # AWS Cognito details for sign in via AWS Cognito
    # COGNITO_CLIENT_ID: ""
    # COGNITO_USER_POOL_SITE: ""
    # COGNITO_USER_POOL_ID: ""

    # Azure AD details for sign in via Azure
    # See https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-protocols
    # AZURE_CLIENT_ID: ""

    # Make OAuth applications require SSL
    OAUTH_APPLICATIONS_REQUIRE_SSL: "true"

  secrets:
    # SMTP Settings
    # SMTP_USERNAME: ""
    # SMTP_PASSWORD: ""

    # Google OAuth secret for sign in via Google
    # GOOGLE_OAUTH_SECRET: ""

    # AWS Cognito secret for sign in via AWS Cognito
    # COGNITO_CLIENT_SECRET: ""

    # Azure AD secret for sign in via Azure AD
    # See https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-protocols
    # AZURE_CLIENT_SECRET: ""

    # Private key to sign JWTs with
    # can be generated with: openssl genrsa -out <key-name.key> <bit-size>
    # e.g. openssl genrsa -out cordtools-jwt.key 4096
    JWT_SIGNING_KEY: |-
      changeme

    # 64 character random string
    SECRET_KEY_BASE: "changeme"

  ingress:
    hosts:
      - host: cordtools.local
        paths:
          - path: /api/v2/
          - path: /users
          - path: /oauth/
          - path: /.well-known/
          - path: /assets/
          - path: /auth/
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  postgresql:
    postgresqlPassword: changeme
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

cord-ui:
  enabled: true
  imagePullSecrets: []
  serviceMonitor:
    enabled: true
  metrics:
    enabled: true
  config:
    # URL to the cord API
    apiBaseUrl: "https://cordtools.local"

    # Domain suffix to reach environments. <env-name>--<instance-type>--<account>.cordtools.local
    environmentUrlSuffix: "cordtools.local"

    # URL to the auth server (cord-api-v2)
    authenticationBaseUrl: "https://cordtools.local"
    # authenticationClientId is generated in Cord API v2
    authenticationClientId: ""
    authenticationAccessTokenUri: "https://cordtools.local/oauth/token"
    authenticationAuthorizationUri: "https://cordtools.local/oauth/authorize"
    authenticationRedirectUri: "https://cordtools.local/login"

    # Gitlab
    gitlabBaseUrl: "https://gitlab.com"
    gitlabApiUrl: "https://gitlab.com/oauth/authorize"
    gitlabAppId: ""
    gitlabCallbackUri: "https://cordtools.local/gitlab/callback"

    # Github
    githubBaseUrl: "https://github.com"
    githubApiUrl: "https://api.github.com"
    githubAuthUrl: ""
    githubClientId: ""
    githubRedirectUri: "https://cordtools.local/github/callback"

    # Bitbucket
    bitbucketBaseUrl: "https://bitbucket.org"
    bitbucketAuthUrl: "https://bitbucket.org/site/oauth2/authorize"
    bitbucketApiUrl: "https://api.bitbucket.org/2.0"
    bitbucketClientId: ""
    bitbucketCallbackUri: "https://cordtools.local/bitbucket/callback"

  ingress:
    hosts:
      - host: cordtools.local
        paths:
          - path: /
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

cord-proxy:
  enabled: true
  imagePullSecrets: []
  serviceMonitor:
    enabled: true
  metrics:
    enabled: true
  internalAPIUser: *internalAPIUser
  internalAPIPass: *internalAPIPass
  ingress:
    hosts:
      - host: "*.cordtools.local"
        paths:
          - path: /
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

ingress-nginx:
  enabled: true
  controller:
    # On some clusters admission webhooks need to be disabled
    # admissionWebhooks:
    #   enabled: false
    config:
      use-forwarded-headers: "true"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    service:
      # Uncomment the following lines if TLS is terminated at the load balancer
      # targetPorts:
      #   http: http
      #   https: http
      annotations: {}
        # "service.beta.kubernetes.io/aws-load-balancer-ssl-cert": "<certificate-arn-in-acm>"
        # "service.beta.kubernetes.io/aws-load-balancer-backend-protocol": "http"
        # "service.beta.kubernetes.io/aws-load-balancer-ssl-ports": "https"

kube-prometheus-stack:
  enabled: true
  # Uncomment the next few lines if running in a managed cluster, e.g. eks
  # kubeControllerManager:
  #   enabled: false
  # kubeScheduler:
  #   enabled: false
  # On some clusters admission webhooks need to be disabled
  # prometheusOperator:
  #   admissionWebhooks:
  #    enabled: false
  prometheus:
    service:
      port: 9090
    prometheusSpec:
      retention: 30d
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
  # Configure alertmanager to send alerts
  # See https://prometheus.io/docs/alerting/configuration/
  # alertmanager:
  #   config:
  #     global:
  #       resolve_timeout: 5m
  #       #smtp_from: noreply@cordtools.local
  #       #smtp_smarthost: ""
  #       #smtp_auth_username: ""
  #       #smtp_auth_password: ""
  #     route:
  #       group_by: ["job"]
  #       group_wait: 30s
  #       group_interval: 5m
  #       repeat_interval: 12h
  #       receiver: cord-alerts
  #       routes:
  #         - match:
  #             alertname: Watchdog
  #           receiver: null
  #     receivers:
  #       - name: null
  #       - name: cord-alerts
  #         email_configs:
  #           - send_resolved: true
  #             to: email@domain.tld
  grafana:
    enabled: true
    adminPassword: "changeme"
    # See https://grafana.com/docs/installation/configuration/
    grafana.ini:
      paths:
        data: /var/lib/grafana/data
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      analytics:
        check_for_updates: true
      log:
        mode: console
      grafana_net:
        url: https://grafana.net
      server:
        root_url: https://grafana.cordtools.local
      auth.basic:
        enabled: false
      auth.generic_oauth:
        enabled: true
        name: Cord Tools
        # Generated in cord-api-v2
        client_id: ""
        # Generated in cord-api-v2
        client_secret: ""
        scopes: openid profile email
        auth_url: https://cordtools.local/oauth/authorize
        token_url: https://cordtools.local/oauth/token
        api_url: https://cordtools.local/oauth/userinfo
        allowed_domains: domain.tld
        allow_sign_up: true

    # additionalDataSources:
    #   - name: 'loki',
    #     type: 'loki',
    #     access: 'proxy',
    #     orgId: 1,
    #     url: 'http://loki.logs.svc:80',
    #     version: 1,
    #     editable: false,

    ingress:
      enabled: true
      hosts:
        - grafana.cordtools.local
      annotations:
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
