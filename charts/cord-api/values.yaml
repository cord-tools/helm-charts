# Default values for cord-api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

image:
  repository: public.ecr.aws/cord-tools/cord-api
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# When to trigger backups of AEM in cron syntax
backupSchedule: "0 7 * * *"

# Cron job to delete all backups that are older than the configured number of days
backupCleaner:
  enabled: false
  schedule: "0 7 * * *"
  days: 30

# Cron job to build packages on a schedule
# There are currently two available frequencies: daily and weekly
packageScheduleRunner:
  enabled: true
  # number of packages to build concurrently
  workers: 5
  frequencies:
    - frequency: daily
      schedule: "0 4 * * *"
    - frequency: weekly
      schedule: "0 5 * * 0"

# Cron job to find and save new archives from the AEM Archive repository
newArchiveRetriever:
  # -- Enable the cron job to find and save new archives from the AEM Archive repository
  enabled: true
  # -- Schedule to run the cron job on
  schedule: "0 7 * * *"
  # -- Address of the AEM Archive repository
  archivesAddress: https://downloads.stage.cord.tools/
  # -- Only find archives that were created after this date. This should be a recent date so that every archive in the AEM archive repository isn't downloaded
  afterDate: "2022-02-04"
  # -- Download new on prem AEM versions, e.g. 6.5.11
  downloadOnPrem: true
  # -- Download new cloud SDK versions, e.g. 2022.2.6276.20220205T222203Z-220100
  downloadCloudSDK: false

# The user to use for internal calls to the cord-api
# internalAPIUser: "user"
# The password to use for internal calls to the cord-api
# internalAPIPass: "password"

localFileStore:
  enabled: true
  # Volume will hold packages and backups.
  volumeSize: 40Gi
  path: /cordtools-files
  # HMAC secret to use for signed URLs
  signingKey: changeme
  accessModes: ["ReadWriteOnce"]

config:
  # the package tool client id generated in cord-api-v2
  OAUTH_CLIENT_ID: ""
  OAUTH_ACCESS_TOKEN_URI: "https://cordtools.local/oauth/token"
  OAUTH_AUTHORIZATION_URI: "https://cordtools.local/oauth/authorize"
  OAUTH_REDIRECT_URI: "https://cordtools.local/oauth/authorize/package-tool"

  # AWS region that Cord Tools runs in. Is used for creating cloud data stores for environments.
  # AWS_REGION: us-west-2

  # URL to the bucket to use as a file store
  # e.g. for S3: 's3://hoodoo-stage-bucket?region=us-west-2'
  # e.g. for local: 'file:///local-bucket'
  BUCKET_URL: file:///cordtools-files

  # Max number of environments allowed.
  MAX_ENVIRONMENTS: "10"

  # Default size of the volume that will be created for each AEM instances
  AEM_DEFAULT_VOLUME_SIZE: "40Gi"

  # Max disk space that can be created for an environment
  AEM_MAX_VOLUME_SIZE: "1000Gi"

  # Amount of memory that AEM will request
  AEM_MEMORY_REQUEST: "2G"

  # Name of storage class for AEM volumes to use
  ENVIRONMENT_STORAGE_CLASS: ""

  # Comma separated list of image pull secrets to add to environment pods. e.g. "docker-hub, private-creds-1"
  # This should include the secret needed to pull the cordtools docker images
  ENVIRONMENT_IMAGE_PULL_SECRETS: ""

  # Comma separated list of image pull secrets to add to build runner pods. e.g. "docker-hub, private-creds-1"
  BUILD_IMAGE_PULL_SECRETS: ""

  # Public URL to Cord Tools
  WEB_APP_URL: "https://cordtools.local/"

  # Values for Github integration
  GITHUB_CLIENT_ID: ""
  GITHUB_AUTH_URL: "https://github.com/login/oauth"

  # Docker image to use as the base for AEM instances
  BASE_IMAGE_REPOSITORY: "public.ecr.aws/cord-tools/base"

  # Docker image to use for dispatcher pods
  DISPATCHER_IMAGE: "public.ecr.aws/cord-tools/dispatcher:4.3.4"

  # Port to use for dispatcher
  # DISPATCHER_PORT: "80"

  # Size of volume to create for dispatcher pods
  # DISPATCHER_VOLUME_SIZE: 20Gi

  # Amount of memory to request for dispatcher pods
  # DISPATCHER_MEMORY_REQUEST: 500M

  # Storage class to use for dispatcher pods
  # DISPATCHER_STORAGE_CLASS: ""

secrets:
  GITHUB_CLIENT_SECRET: ""

service:
  type: ClusterIP
  port: 80
  internalPort: 8080

serviceMonitor:
  enabled: false

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: cordtools.local
      paths:
        - path: /api/v1
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

resources: {}
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  create: true

# Database
mongodb:
  enabled: true
  auth:
    enabled: true
    database: cordtools
    username: cordtools-user
    password: changeme
  persistence:
    enabled: true
    size: 8Gi
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false

# https://stackoverflow.com/questions/71697241/promtail-is-not-able-to-send-logs-to-grafana
# https://github.com/grafana/helm-charts/issues/1162
# https://artifacthub.io/packages/helm/grafana/promtail
# # Log storage
loki:
  enabled: true
  server:
    http_listen_port: 3100
  persistence:
    enabled: false
    size: 10Gi
  # storage_config:
  #   type: filesystem
  #   filesystem:
  #     directory: /data
  #     block_volume_size: 10Gi
  chunk_store_config:
    max_look_back_period: 720h
  table_manager:
    retention_deletes_enabled: true
    retention_period: 720h
  clients:
    - url: http://loki:3100/loki/api/v1/push
      tenant_id: 1
  read:
    replicas: 1
  write:
    replicas: 1

# loki:
#   enabled: true
#   persistence:
#     enabled: false
#     size: 10Gi
#   serviceMonitor:
#     enabled: false
#   config:
#     chunk_store_config:
#       max_look_back_period: 720h
#     table_manager:
#       retention_deletes_enabled: true
#       retention_period: 720h
    # clients:
    #   - url: http://loki.monitoring:3100/loki/api/v1/push
    #     tenant_id: 1

# Log collector
promtail:
  enabled: true
  serviceMonitor:
    enabled: false
  config:
    snippets:
      common:
        - action: replace
          source_labels:
            - __meta_kubernetes_pod_node_name
          target_label: node_name
        - action: replace
          source_labels:
            - __meta_kubernetes_namespace
          target_label: namespace
        - action: replace
          replacement: $1
          separator: /
          source_labels:
            - namespace
            - app
          target_label: job
        - action: replace
          source_labels:
            - __meta_kubernetes_pod_name
          target_label: pod
        - action: replace
          source_labels:
            - __meta_kubernetes_pod_container_name
          target_label: container
        - action: replace
          source_labels:
            - __meta_kubernetes_pod_label_name
          target_label: name
        - action: labelmap
          regex: __meta_kubernetes_pod_label_cordTools(.+)
          replacement: cordTools${1}
        - action: replace
          replacement: /var/log/pods/*$1/*.log
          separator: /
          source_labels:
            - __meta_kubernetes_pod_uid
            - __meta_kubernetes_pod_container_name
          target_label: __path__
    clients:
    - url: http://loki:3100/loki/api/v1/push
      tenant_id: 1

# https://github.com/grafana/loki/issues/7081
# grafana:
#   datasources:
#     datasources.yaml:
#       apiVersion: 1
#       datasources:
#         - name: Loki
#           type: loki
#           url: http://loki:3100
#           jsonData:
#             httpHeaderName1: 'X-Scope-OrgID'
#           secureJsonData:
#             httpHeaderValue1: '1'

# The command to run to trigger backups in a cronjob
# WARNING: Only change if you know what you are doing
backupTriggerArgs:
  - ./cord-api backup-trigger

# The command to run to clean up backups in a cronjob.
# It must be a string since it is a template
# WARNING: Only change if you know what you are doing
backupCleanerArgs: |-
  - ./cord-api backup-cleaner --days={{ .Values.backupCleaner.days }} --yes

# The command to run to build packages on a schedule in a cronjob
# It must be a string since it is a template
# WARNING: Only change if you know what you are doing
packageScheduleRunnerArgs: |-
  - ./cord-api package-schedule-runner --frequency={{ .schedule.frequency }} --workers={{ .Values.packageScheduleRunner.workers }}

# -- The command to run to retrieve new archives in a cronjob.
# It must be a string since it is a template.
# WARNING: Only change if you know what you are doing
newArchiveRetrieverArgs: |-
  - ./cord-api retrieveNewArchives --address={{ .Values.newArchiveRetriever.archivesAddress | quote }} --after={{ .Values.newArchiveRetriever.afterDate | quote }} --download-on-prem={{ .Values.newArchiveRetriever.downloadOnPrem | quote }} --download-cloud-sdk={{ .Values.newArchiveRetriever.downloadCloudSDK | quote }}
